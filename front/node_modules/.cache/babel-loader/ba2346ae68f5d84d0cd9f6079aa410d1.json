{"ast":null,"code":"const defualtState = {\n  btnSave: []\n};\n\nconst btnSave = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defualtState;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case \"Show\":\n      return {\n        List: payload\n      };\n\n    case \"add\":\n      return {\n        btnSave: [payload, ...state.btnSave]\n      };\n\n    case \"edit\":\n      let index = state.btnSave.findIndex(x => x.id === payload.id);\n      const newArray = [...state.btnSave]; //making a new array\n\n      newArray[index].name = payload.name; //changing value in the new array\n\n      return { ...state,\n        //copying the orignal state\n        todos: newArray //reassingning todos to new array\n\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default btnSave;\nexport const changeState = payload => {\n  return {\n    type: \"add\",\n    payload: payload\n  };\n};\nexport const show = payload => {\n  return {\n    type: \"Show\",\n    payload: payload\n  };\n};\nexport const edit = payload => {\n  return {\n    type: \"edit\",\n    payload: payload\n  };\n};","map":{"version":3,"sources":["/Users/admin/Desktop/pdfest/src/reducers/btnReducer.js"],"names":["defualtState","btnSave","state","type","payload","List","index","findIndex","x","id","newArray","name","todos","changeState","show","edit"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE;AADU,CAArB;;AAIA,MAAMA,OAAO,GAAG,YAA6C;AAAA,MAA5CC,KAA4C,uEAApCF,YAAoC;AAAA,MAAtB;AAAEG,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAsB;;AAC3D,UAAQD,IAAR;AACE,SAAK,MAAL;AACE,aAAO;AAAEE,QAAAA,IAAI,EAAED;AAAR,OAAP;;AAEF,SAAK,KAAL;AACE,aAAO;AAAEH,QAAAA,OAAO,EAAE,CAACG,OAAD,EAAU,GAAGF,KAAK,CAACD,OAAnB;AAAX,OAAP;;AACF,SAAK,MAAL;AACE,UAAIK,KAAK,GAAGJ,KAAK,CAACD,OAAN,CAAcM,SAAd,CAAyBC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASL,OAAO,CAACK,EAAhD,CAAZ;AACA,YAAMC,QAAQ,GAAG,CAAC,GAAGR,KAAK,CAACD,OAAV,CAAjB,CAFF,CAEuC;;AACrCS,MAAAA,QAAQ,CAACJ,KAAD,CAAR,CAAgBK,IAAhB,GAAuBP,OAAO,CAACO,IAA/B,CAHF,CAGqC;;AACnC,aAAO,EACL,GAAGT,KADE;AACK;AACVU,QAAAA,KAAK,EAAEF,QAFF,CAEY;;AAFZ,OAAP;;AAKF;AACE,aAAOR,KAAP;AAhBJ;AAkBD,CAnBD;;AAoBA,eAAeD,OAAf;AAEA,OAAO,MAAMY,WAAW,GAAIT,OAAD,IAAa;AACtC,SAAO;AACLD,IAAAA,IAAI,EAAE,KADD;AAELC,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAMU,IAAI,GAAIV,OAAD,IAAa;AAC/B,SAAO;AACLD,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALM;AAMP,OAAO,MAAMW,IAAI,GAAIX,OAAD,IAAa;AAC/B,SAAO;AACLD,IAAAA,IAAI,EAAE,MADD;AAELC,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALM","sourcesContent":["const defualtState = {\n  btnSave: [],\n};\n\nconst btnSave = (state = defualtState, { type, payload }) => {\n  switch (type) {\n    case \"Show\":\n      return { List: payload };\n\n    case \"add\":\n      return { btnSave: [payload, ...state.btnSave] };\n    case \"edit\":\n      let index = state.btnSave.findIndex((x) => x.id === payload.id);\n      const newArray = [...state.btnSave]; //making a new array\n      newArray[index].name = payload.name//changing value in the new array\n      return {\n        ...state, //copying the orignal state\n        todos: newArray, //reassingning todos to new array\n      };\n\n    default:\n      return state;\n  }\n};\nexport default btnSave;\n\nexport const changeState = (payload) => {\n  return {\n    type: \"add\",\n    payload: payload,\n  };\n};\nexport const show = (payload) => {\n  return {\n    type: \"Show\",\n    payload: payload,\n  };\n};\nexport const edit = (payload) => {\n  return {\n    type: \"edit\",\n    payload: payload,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}